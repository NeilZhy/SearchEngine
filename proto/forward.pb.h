// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: forward.proto

#ifndef PROTOBUF_forward_2eproto__INCLUDED
#define PROTOBUF_forward_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace protobuf_forward_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[3];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsStrImpl();
void InitDefaultsStr();
void InitDefaultsforwar_indexImpl();
void InitDefaultsforwar_index();
void InitDefaultsforward_hashImpl();
void InitDefaultsforward_hash();
inline void InitDefaults() {
  InitDefaultsStr();
  InitDefaultsforwar_index();
  InitDefaultsforward_hash();
}
}  // namespace protobuf_forward_2eproto
namespace lm {
class Str;
class StrDefaultTypeInternal;
extern StrDefaultTypeInternal _Str_default_instance_;
class forwar_index;
class forwar_indexDefaultTypeInternal;
extern forwar_indexDefaultTypeInternal _forwar_index_default_instance_;
class forward_hash;
class forward_hashDefaultTypeInternal;
extern forward_hashDefaultTypeInternal _forward_hash_default_instance_;
}  // namespace lm
namespace lm {

// ===================================================================

class Str : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:lm.Str) */ {
 public:
  Str();
  virtual ~Str();

  Str(const Str& from);

  inline Str& operator=(const Str& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Str(Str&& from) noexcept
    : Str() {
    *this = ::std::move(from);
  }

  inline Str& operator=(Str&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Str& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Str* internal_default_instance() {
    return reinterpret_cast<const Str*>(
               &_Str_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(Str* other);
  friend void swap(Str& a, Str& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Str* New() const PROTOBUF_FINAL { return New(NULL); }

  Str* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Str& from);
  void MergeFrom(const Str& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Str* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string str = 2;
  bool has_str() const;
  void clear_str();
  static const int kStrFieldNumber = 2;
  const ::std::string& str() const;
  void set_str(const ::std::string& value);
  #if LANG_CXX11
  void set_str(::std::string&& value);
  #endif
  void set_str(const char* value);
  void set_str(const char* value, size_t size);
  ::std::string* mutable_str();
  ::std::string* release_str();
  void set_allocated_str(::std::string* str);

  // @@protoc_insertion_point(class_scope:lm.Str)
 private:
  void set_has_str();
  void clear_has_str();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr str_;
  friend struct ::protobuf_forward_2eproto::TableStruct;
  friend void ::protobuf_forward_2eproto::InitDefaultsStrImpl();
};
// -------------------------------------------------------------------

class forwar_index : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:lm.forwar_index) */ {
 public:
  forwar_index();
  virtual ~forwar_index();

  forwar_index(const forwar_index& from);

  inline forwar_index& operator=(const forwar_index& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  forwar_index(forwar_index&& from) noexcept
    : forwar_index() {
    *this = ::std::move(from);
  }

  inline forwar_index& operator=(forwar_index&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const forwar_index& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const forwar_index* internal_default_instance() {
    return reinterpret_cast<const forwar_index*>(
               &_forwar_index_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(forwar_index* other);
  friend void swap(forwar_index& a, forwar_index& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline forwar_index* New() const PROTOBUF_FINAL { return New(NULL); }

  forwar_index* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const forwar_index& from);
  void MergeFrom(const forwar_index& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(forwar_index* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .lm.Str value_vector = 2;
  int value_vector_size() const;
  void clear_value_vector();
  static const int kValueVectorFieldNumber = 2;
  const ::lm::Str& value_vector(int index) const;
  ::lm::Str* mutable_value_vector(int index);
  ::lm::Str* add_value_vector();
  ::google::protobuf::RepeatedPtrField< ::lm::Str >*
      mutable_value_vector();
  const ::google::protobuf::RepeatedPtrField< ::lm::Str >&
      value_vector() const;

  // required int32 key = 1;
  bool has_key() const;
  void clear_key();
  static const int kKeyFieldNumber = 1;
  ::google::protobuf::int32 key() const;
  void set_key(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:lm.forwar_index)
 private:
  void set_has_key();
  void clear_has_key();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::lm::Str > value_vector_;
  ::google::protobuf::int32 key_;
  friend struct ::protobuf_forward_2eproto::TableStruct;
  friend void ::protobuf_forward_2eproto::InitDefaultsforwar_indexImpl();
};
// -------------------------------------------------------------------

class forward_hash : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:lm.forward_hash) */ {
 public:
  forward_hash();
  virtual ~forward_hash();

  forward_hash(const forward_hash& from);

  inline forward_hash& operator=(const forward_hash& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  forward_hash(forward_hash&& from) noexcept
    : forward_hash() {
    *this = ::std::move(from);
  }

  inline forward_hash& operator=(forward_hash&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const forward_hash& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const forward_hash* internal_default_instance() {
    return reinterpret_cast<const forward_hash*>(
               &_forward_hash_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(forward_hash* other);
  friend void swap(forward_hash& a, forward_hash& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline forward_hash* New() const PROTOBUF_FINAL { return New(NULL); }

  forward_hash* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const forward_hash& from);
  void MergeFrom(const forward_hash& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(forward_hash* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .lm.forwar_index index = 1;
  int index_size() const;
  void clear_index();
  static const int kIndexFieldNumber = 1;
  const ::lm::forwar_index& index(int index) const;
  ::lm::forwar_index* mutable_index(int index);
  ::lm::forwar_index* add_index();
  ::google::protobuf::RepeatedPtrField< ::lm::forwar_index >*
      mutable_index();
  const ::google::protobuf::RepeatedPtrField< ::lm::forwar_index >&
      index() const;

  // @@protoc_insertion_point(class_scope:lm.forward_hash)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::lm::forwar_index > index_;
  friend struct ::protobuf_forward_2eproto::TableStruct;
  friend void ::protobuf_forward_2eproto::InitDefaultsforward_hashImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Str

// required string str = 2;
inline bool Str::has_str() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Str::set_has_str() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Str::clear_has_str() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Str::clear_str() {
  str_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_str();
}
inline const ::std::string& Str::str() const {
  // @@protoc_insertion_point(field_get:lm.Str.str)
  return str_.GetNoArena();
}
inline void Str::set_str(const ::std::string& value) {
  set_has_str();
  str_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:lm.Str.str)
}
#if LANG_CXX11
inline void Str::set_str(::std::string&& value) {
  set_has_str();
  str_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:lm.Str.str)
}
#endif
inline void Str::set_str(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_str();
  str_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lm.Str.str)
}
inline void Str::set_str(const char* value, size_t size) {
  set_has_str();
  str_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lm.Str.str)
}
inline ::std::string* Str::mutable_str() {
  set_has_str();
  // @@protoc_insertion_point(field_mutable:lm.Str.str)
  return str_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Str::release_str() {
  // @@protoc_insertion_point(field_release:lm.Str.str)
  clear_has_str();
  return str_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Str::set_allocated_str(::std::string* str) {
  if (str != NULL) {
    set_has_str();
  } else {
    clear_has_str();
  }
  str_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), str);
  // @@protoc_insertion_point(field_set_allocated:lm.Str.str)
}

// -------------------------------------------------------------------

// forwar_index

// required int32 key = 1;
inline bool forwar_index::has_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void forwar_index::set_has_key() {
  _has_bits_[0] |= 0x00000001u;
}
inline void forwar_index::clear_has_key() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void forwar_index::clear_key() {
  key_ = 0;
  clear_has_key();
}
inline ::google::protobuf::int32 forwar_index::key() const {
  // @@protoc_insertion_point(field_get:lm.forwar_index.key)
  return key_;
}
inline void forwar_index::set_key(::google::protobuf::int32 value) {
  set_has_key();
  key_ = value;
  // @@protoc_insertion_point(field_set:lm.forwar_index.key)
}

// repeated .lm.Str value_vector = 2;
inline int forwar_index::value_vector_size() const {
  return value_vector_.size();
}
inline void forwar_index::clear_value_vector() {
  value_vector_.Clear();
}
inline const ::lm::Str& forwar_index::value_vector(int index) const {
  // @@protoc_insertion_point(field_get:lm.forwar_index.value_vector)
  return value_vector_.Get(index);
}
inline ::lm::Str* forwar_index::mutable_value_vector(int index) {
  // @@protoc_insertion_point(field_mutable:lm.forwar_index.value_vector)
  return value_vector_.Mutable(index);
}
inline ::lm::Str* forwar_index::add_value_vector() {
  // @@protoc_insertion_point(field_add:lm.forwar_index.value_vector)
  return value_vector_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::lm::Str >*
forwar_index::mutable_value_vector() {
  // @@protoc_insertion_point(field_mutable_list:lm.forwar_index.value_vector)
  return &value_vector_;
}
inline const ::google::protobuf::RepeatedPtrField< ::lm::Str >&
forwar_index::value_vector() const {
  // @@protoc_insertion_point(field_list:lm.forwar_index.value_vector)
  return value_vector_;
}

// -------------------------------------------------------------------

// forward_hash

// repeated .lm.forwar_index index = 1;
inline int forward_hash::index_size() const {
  return index_.size();
}
inline void forward_hash::clear_index() {
  index_.Clear();
}
inline const ::lm::forwar_index& forward_hash::index(int index) const {
  // @@protoc_insertion_point(field_get:lm.forward_hash.index)
  return index_.Get(index);
}
inline ::lm::forwar_index* forward_hash::mutable_index(int index) {
  // @@protoc_insertion_point(field_mutable:lm.forward_hash.index)
  return index_.Mutable(index);
}
inline ::lm::forwar_index* forward_hash::add_index() {
  // @@protoc_insertion_point(field_add:lm.forward_hash.index)
  return index_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::lm::forwar_index >*
forward_hash::mutable_index() {
  // @@protoc_insertion_point(field_mutable_list:lm.forward_hash.index)
  return &index_;
}
inline const ::google::protobuf::RepeatedPtrField< ::lm::forwar_index >&
forward_hash::index() const {
  // @@protoc_insertion_point(field_list:lm.forward_hash.index)
  return index_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace lm

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_forward_2eproto__INCLUDED
