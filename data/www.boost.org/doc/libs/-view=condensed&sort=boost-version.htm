<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
    "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
  Boost Library Documentation
  
  
  
  <!--[if IE 7]>  <![endif]-->
  
    
  
  
  
  
  Boost
  C++ Libraries
  
  
  ...one of the most highly
  regarded and expertly designed C++ library projects in the
  world.  Herb Sutter and Andrei
  Alexandrescu, C++
  Coding Standards
  
  
  
    
      
        
          
            
              Boost Library Documentation
            
            
              
                  
                    
                    All Categorized Condensed                     Standard Proposals TR1 libraries                     
                  
                  
                    Sort by:
                    
                    Name First Release                     
                  
              
              
                            
                              
                Integer: The organization of boost integer headers and classes is designed to take advantage of <stdint.h> types from the 1999 C standard without resorting to undefined behavior in terms of the 1998 C++ standard. The header <boost/cstdint.hpp> makes the standard integer types safely available in namespace boost without placing any names in namespace std.                
                              
                Config: Helps Boost library developers adapt to compiler idiosyncrasies; not intended for library users.                
                              
                Timer: Event timer, progress timer, and progress display classes.                
                              
                Value Initialized: Wrapper for uniform-syntax value initialization, based on the original idea of David Abrahams.                
                              
                Operators: Templates ease arithmetic classes and iterators.                
                              
                Rational: A rational number class.                
                              
                Type Traits: Templates for fundamental properties of types.                
                              
                Call Traits: Defines types for passing parameters.                
                              
                Compressed Pair: Empty member optimization.                
                              
                Utility: Class noncopyable plus checked_delete(), checked_array_delete(), next(), prior() function templates, plus base-from-member idiom.                
                              
                Random: A complete system for random number generation.                
                              
                Functional: The Boost.Function library contains a family of class templates that are function object wrappers.                
                              
                Array: STL compliant container wrapper for arrays of constant size.                
                              
                Graph: The BGL graph interface and graph components are generic, in the same sense as the the Standard Template Library (STL).                
                              
                Regex: Regular expression library.                
                              
                Concept Check: Tools for generic programming.                
                              
                Static Assert: Static assertions (compile time assertions).                
                              
                Python: The Boost Python Library is a framework for interfacing Python and C++. It allows you to quickly and seamlessly expose C++ classes functions and objects to Python, and vice-versa, using no special tools -- just your C++ compiler.                
                              
                Property Map: Concepts defining interfaces which map key objects to value objects.                
                              
                Conversion: Polymorphic casts.                
                              
                Lexical Cast: General literal text conversions, such as an int represented a string, or vice-versa.                
                              
                Iterator: The Boost Iterator Library contains two parts. The first is a system of concepts which extend the C++ standard iterator requirements. The second is a framework of components for building iterators based on these extended concepts and includes several useful iterator adaptors.                
                              
                Pool: Memory pool management.                
                              
                Test: Support for simple program testing, full unit testing, and for program execution monitoring.                
                              
                Compatibility: Help for non-conforming standard libraries.                
                              
                CRC: The Boost CRC Library provides two implementations of CRC (cyclic redundancy code) computation objects and two implementations of CRC computation functions. The implementations are template-based.                
                              
                Function: Function object wrappers for deferred calls or callbacks.                
                              
                Math Octonion: Octonions.                
                              
                Smart Ptr: Smart pointer class templates.                
                              
                Tokenizer: Break of a string or other character sequence into a series of tokens.                
                              
                Math: Boost.Math includes several contributions in the domain of mathematics: The Greatest Common Divisor and Least Common Multiple library provides run-time and compile-time evaluation of the greatest common divisor (GCD) or least common multiple (LCM) of two integers. The Special Functions library currently provides eight templated special functions, in namespace boost. The Complex Number Inverse Trigonometric Functions are the inverses of trigonometric functions currently present in the C++ standard. Quaternions are a relative of complex numbers often used to parameterise rotations in three dimentional space. Octonions, like quaternions, are a relative of complex numbers.                
                              
                Math Quaternion: Quaternions.                
                              
                Any: Safe, generic container for single values of different value types.                
                              
                Tuple: Ease definition of functions returning multiple values, and more.                
                              
                Member Function: Generalized binders for function/object/pointers and member functions.                
                              
                Thread: Portable C++ multi-threading. C++11, C++14.                
                              
                Ref: A utility library for passing references to generic functions.                
                              
                Bind: boost::bind is a generalization of the standard functions std::bind1st and std::bind2nd. It supports arbitrary function objects, functions, function pointers, and member function pointers, and is able to bind any argument to a specific value or route input arguments into arbitrary positions.                
                              
                Preprocessor: Preprocessor metaprogramming tools including repetition and recursion.                
                              
                Math Common Factor: Greatest common divisor and least common multiple.                
                              
                Assert: Customizable assert macros.                
                              
                Lambda: Define small unnamed function objects at the actual call site, and more.                
                              
                IO State Savers: The I/O sub-library of Boost helps segregate the large number of Boost headers. This sub-library should contain various items to use with/for the standard I/O library.                
                              
                uBLAS: uBLAS provides matrix and vector classes as well as basic linear algebra routines. Several dense, packed and sparse storage schemes are supported.                
                              
                Multi-Array: Boost.MultiArray provides a generic N-dimensional array concept definition and common implementations of that interface.                
                              
                Format: The format library provides a type-safe mechanism for formatting arguments according to a printf-like format-string.                
                              
                Dynamic Bitset: The dynamic_bitset class represents a set of bits. It provides accesses to the value of individual bits via an operator[] and provides all of the bitwise operators that one can apply to builtin integers, such as operator& and operator<<. The number of bits in the set is specified at runtime via a parameter to the constructor of the dynamic_bitset.                
                              
                Date Time: A set of date-time libraries based on generic programming concepts.                
                              
                Signals (deprecated): Managed signals & slots callback implementation.                
                              
                Interval: Extends the usual arithmetic functions to mathematical intervals.                
                              
                Spirit: LL parser framework represents parsers directly as EBNF grammars in inlined C++.                
                              
                MPL: The Boost.MPL library is a general-purpose, high-level C++ template metaprogramming framework of compile-time algorithms, sequences and metafunctions. It provides a conceptual foundation and an extensive set of powerful and coherent tools that make doing explict metaprogramming in C++ as easy and enjoyable as possible within the current language.                
                              
                Optional: A value-semantic, type-safe wrapper for representing 'optional' (or 'nullable') objects of a given type. An optional object may or may not contain a value of the underlying type.                
                              
                Filesystem: The Boost Filesystem Library provides portable facilities to query and manipulate paths, files, and directories.                
                              
                Variant: Safe, generic, stack-based discriminated union container.                
                              
                Enable If: Selective inclusion of function template overloads.                
                              
                Serialization: Serialization for persistence and marshalling.                
                              
                Tribool: 3-state boolean type library.                
                              
                Assign: Filling containers with constant or generated data has never been easier.                
                              
                Program Options: The program_options library allows program developers to obtain program options, that is (name, value) pairs from the user, via conventional methods such as command line and config file.                
                              
                Multi-Index: The Boost Multi-index Containers Library provides a class template named multi_index_container which enables the construction of containers maintaining one or more indices with different sorting and access semantics.                
                              
                Range: A new infrastructure for generic algorithms that builds on top of the new iterator concepts.                
                              
                Numeric Conversion: Optimized Policy-based Numeric Conversions.                
                              
                String Algo: String algorithms library.                
                              
                Result Of: Determines the type of a function call expression.                
                              
                In Place Factory, Typed In Place Factory: Generic in-place construction of contained objects with a variadic argument-list.                
                              
                Min-Max: Standard library extensions for simultaneous min/max and min/max element computations.                
                              
                Parameter: Boost.Parameter Library - Write functions that accept arguments by name.                
                              
                Iostreams: Boost.IOStreams provides a framework for defining streams, stream buffers and i/o filters.                
                              
                Pointer Container: Containers for storing heap-allocated polymorphic objects to ease OO-programming.                
                              
                Wave: The Boost.Wave library is a Standards conformant, and highly configurable implementation of the mandated C99/C++ preprocessor functionality packed behind an easy to use iterator interface.                
                              
                Container Hash: An STL-compatible hash function object that can be extended to hash user defined types.                
                              
                Statechart: Boost.Statechart - Arbitrarily complex finite state machines can be implemented in easily readable and maintainable C++ code.                
                              
                Xpressive: Regular expressions that can be written as strings or as expression templates, and which can refer to each other and themselves recursively with the power of context-free grammars.                
                              
                Foreach: In C++, writing a loop that iterates over a sequence is tedious. We can either use iterators, which requires a considerable amount of boiler-plate, or we can use the std::for_each() algorithm and move our loop body into a predicate, which requires no less boiler-plate and forces us to move our logic far from where it will be used. In contrast, some other languages, like Perl, provide a dedicated "foreach" construct that automates this process. BOOST_FOREACH is just such a construct for C++. It iterates over sequences for us, freeing us from having to deal directly with iterators or write predicates.                
                              
                Typeof: Typeof operator emulation.                
                              
                Bimap: Bidirectional maps library for C++. With Boost.Bimap you can create associative containers in which both types can be used as key.                
                              
                Function Types: Boost.FunctionTypes provides functionality to classify, decompose and synthesize function, function pointer, function reference and pointer to member types.                
                              
                Fusion: Library for working with tuples, including various containers, algorithms, etc.                
                              
                Circular Buffer: A STL compliant container also known as ring or cyclic buffer.                
                              
                Math/Special Functions: A wide selection of mathematical special functions.                
                              
                Asio: Portable networking and other low-level I/O, including sockets, timers, hostname resolution, socket iostreams, serial ports, file descriptors and Windows HANDLEs.                
                              
                MPI: Message Passing Interface library, for use in distributed-memory parallel application programming.                
                              
                Interprocess: Shared memory, memory mapped files, process-shared mutexes, condition variables, containers and allocators.                
                              
                GIL: Generic Image Library                
                              
                System: Operating system support, including the diagnostics support that will be part of the C++0x standard library.                
                              
                Intrusive: Intrusive containers and algorithms.                
                              
                Math/Statistical Distributions: A wide selection of univariate statistical distributions and functions that operate on them.                
                              
                Unordered: Unordered associative containers.                
                              
                Units: Zero-overhead dimensional analysis and unit/quantity manipulation and conversion.                
                              
                Exception: The Boost Exception library supports transporting of arbitrary data in exception objects, and transporting of exceptions between threads.                
                              
                Accumulators: Framework for incremental calculation, and collection of statistical accumulators.                
                              
                Proto: Expression template library and compiler construction toolkit for domain-specific embedded languages.                
                              
                Swap: Enhanced generic swap function.                
                              
                Scope Exit: Execute arbitrary code at scope exit.                
                              
                Flyweight: Design pattern to manage large quantities of highly redundant objects.                
                              
                Signals2: Managed signals & slots callback implementation (thread-safe version 2).                
                              
                GraphParallel: The PBGL graph interface and graph components are generic, in the same sense as the the Standard Template Library (STL).                
                              
                Property Tree: A tree data structure especially suited to storing configuration data.                
                              
                Uuid: A universally unique identifier.                
                              
                Functional/Factory: Function object templates for dynamic and static object creation                
                              
                Functional/Forward: Adapters to allow generic function objects to accept arbitrary arguments                
                              
                Polygon: Voronoi diagram construction and booleans/clipping, resizing/offsetting and more for planar polygons with integral coordinates.                
                              
                Meta State Machine: A very high-performance library for expressive UML2 finite state machines.                
                              
                ICL: Interval Container Library, interval sets and maps and aggregation of associated values                
                              
                Phoenix: Define small unnamed function objects at the actual call site, and more.                
                              
                Ratio: Compile time rational arithmetic. C++11.                
                              
                Chrono: Useful time utilities. C++11.                
                              
                Geometry: The Boost.Geometry library provides geometric algorithms, primitives and spatial index.                
                              
                Move: Portable move semantics for C++03 and C++11 compilers.                
                              
                Locale: Provide localization and Unicode handling tools for C++.                
                              
                Container: Standard library containers and extensions.                
                              
                Heap: Priority queue data structures.                
                              
                Identity Type: Wrap types within round parenthesis so they can always be passed as macro parameters.                
                              
                Local Function: Program functions locally, within other functions, directly within the scope where they are needed.                
                              
                Functional/Overloaded Function: Overload different functions into a single function object.                
                              
                Algorithm: A collection of useful generic algorithms.                
                              
                Context: (C++11) Context switching library.                
                              
                Lockfree: Lockfree data structures.                
                              
                Coroutine (deprecated): Coroutine library.                
                              
                Atomic: C++11-style atomic<>.                
                              
                Multiprecision: Extended precision arithmetic types for floating point, integer andrational arithmetic.                
                              
                Odeint: Solving ordinary differential equations.                
                              
                Type Erasure: Runtime polymorphism based on concepts.                
                              
                TTI: Type Traits Introspection library.                
                              
                Log: Logging library.                
                              
                Predef: This library defines a set of compiler, architecture, operating system, library, and other version numbers from the information it can gather of C, C++, Objective C, and Objective C++ predefined macros or those defined in generally available headers.                
                              
                Core: A collection of simple core utilities with minimal dependencies.                
                              
                Align: Memory alignment functions, allocators, and traits.                
                              
                Type Index: Runtime/Compile time copyable type info.                
                              
                ThrowException: A common infrastructure for throwing exceptions from Boost libraries.                
                              
                Endian: Types and conversion functions for correct byte ordering and more regardless of processor endianness.                
                              
                Sort: High-performance templated sort functions.                
                              
                Coroutine2: (C++11) Coroutine library.                
                              
                Convert: An extendible and configurable type-conversion framework.                
                              
                VMD: Variadic Macro Data library.                
                              
                Metaparse: A library for generating compile time parsers parsing embedded DSL code as part of the C++ compilation process                
                              
                Compute: Parallel/GPU-computing library                
                              
                Hana: A modern C++ metaprogramming library. It provides high level algorithms to manipulate heterogeneous sequences, allows writing type-level computations with a natural syntax, provides tools to introspect user-defined types and much more.                
                              
                DLL: Library for comfortable work with DLL and DSO.                
                              
                Fiber: (C++11) Userland threads library.                
                              
                QVM: Boost QVM is a generic library for working with quaternions, vectors and matrices of static size with the emphasis on 2, 3 and 4-dimensional operations needed in graphics, video games and simulation applications.                
                              
                Process: Library to create processes in a portable way.                
                              
                PolyCollection: Fast containers of polymorphic objects.                
                              
                Stacktrace: Gather, store, copy and print backtraces.                
                              
                Mp11: A C++11 metaprogramming library.                
                              
                Beast: Portable HTTP, WebSocket, and network operations using only C++11 and Boost.Asio                
                              
                CallableTraits: A spiritual successor to Boost.FunctionTypes, Boost.CallableTraits is a header-only C++11 library for the compile-time inspection and manipulation of all 'callable' types. Additional support for C++17 features.                
                              
                Contract: Contract programming for C++. All contract programming features are supported: Subcontracting, class invariants, postconditions (with old and return values), preconditions, customizable actions on assertion failure (e.g., terminate or throw), optional compilation and checking of assertions, etc.                
                              
                HOF: Higher-order functions for C++                
                            
                          
          
        
      
      
          
    
  
  
  
  
  
    
      
        Welcome >
  
    Getting Started >
    Download >
    Libraries >
    Mailing Lists >
    Reporting and
    Fixing Bugs>
    Wiki>
  
      
        Introduction >
  
    Download >
    News >
    Version History
    >
    License >
    People >
    Bibliography
    >
    Who's Using Boost
    >
    FAQ >
    How Boost Started >
    Index >
  
      
        Community >
  
    Discussion Groups >
    Discussion Policy >
    
      C++ >
      
        Committee Meetings
        >
        
        Official Library Maintainer Program>
        
        Generic Progamming
        Techniques >
        Error and Exception
        Handling >
        Exception-Safety in
        Generic Components >
        Counted Body Techniques
        >
        Implementation Variations
        >
        Feature Model
        Diagrams >
      
    
    Acknowledgements >
    Mailing Lists >
    Moderators >
    Steering
    Committee >
    Requesting a New Feature
    >
    
      Reviews >
      
        Schedule >
      
    
    Sandbox >
    
      IRC >
    
    
      Google Summer of Code >
      
        2006 Overview
        >
      
    
    C++Now >
  
      
        Development >
  
    
      Submissions >
    
    Reporting and Fixing
    Bugs>
    Open Pull
    Requests Report>
    
      Testing >
      
        Master Summary
        >
        Master Issues
        >
        Develop
        Summary >
        Develop
        Issues >
        Running
        Regression Tests >
      
    
    Requirements and Guidelines
    >
      
        Test policy >
        Header policy >
        Separate Source
        >
        Library Reuse >
        Coding
        Guidelines for Integral Constant Expressions >
        Library
        Metadata >
      
    
    
      Website
      
        Updating
        >
        Exemplar >
        Design FAQ >
        Self Check >
      
    
  
      
        Documentation >
  
    Getting Started
    >
    
      Libraries >
      
        1.67.0 - Current
        Release >
        1.66.0 >
        1.65.1 >
        1.65.0 >
        1.64.0 >
        1.63.0 >
        1.62.0 >
        1.61.0 >
        1.60.0 >
        1.59.0 >
        1.58.0 >
        1.57.0 >
        1.56.0 >
        1.55.0 >
        1.54.0 >
        1.53.0 >
        1.52.0 >
        1.51.0 >
        1.50.0 >
        1.49.0 >
        1.48.0 >
        1.47.0 >
        1.46.1 >
        1.46.0 >
        1.45.0 >
        1.44.0 >
        1.43.0 >
        1.42.0 >
        1.41.0 >
        1.40.0 >
        1.39.0 >
        1.38.0 >
        1.37.0 >
        1.36.0 >
        1.35.0 >
        1.34.1 >
        1.34.0 >
        1.33.1 >
        1.32.0 >
        1.31.0 >
      
    
    
      Tools >
      
        Boost Build >
        Regression >
        Inspect >
        BoostBook >
        QuickBook >
        bcp >
        Wave >
        AutoIndex >
      
    
  
    
    
  
      
      
    
  
  
    
      
        Revised $Date$
      
      
        Copyright Beman Dawes, David Abrahams, 1998-2005.
        Copyright Rene Rivera 2004-2005.
        
    Distributed under the Boost Software License, Version 1.0.
  
    
    
        
    XHTML 1.0
    CSS
    OSI
    Certified
  
    
    
  
