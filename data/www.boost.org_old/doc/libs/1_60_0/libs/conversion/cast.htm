<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">

<html>
  <head>
    <meta name="generator" content=
    "Microsoft FrontPage 5.0">
    <meta http-equiv="Content-Type" content=
    "text/html; charset=UTF-8">
    <meta name="GENERATOR" content="Microsoft FrontPage 4.0">
    <meta name="ProgId" content="FrontPage.Editor.Document">

    <title>Header boost/polymorphic_cast.hpp Documentation - 1.60.0</title>
    <style>
       .copyright
        {
            color: #666666;
            font-size: small;
        }
    </style>
  <link rel="icon" href="/favicon.ico" type="image/ico"><link rel="stylesheet" type="text/css" href="../../../../../style-v2/section-basic.css" tppabs="https://www.boost.org/style-v2/section-basic.css"><meta name="viewport" content="width=device-width,initial-scale=1.0"/></head>

  <body bgcolor="#FFFFFF" text="#000000">  <div id="boost-common-heading-doc">
    <div class="heading-inner">
  <div class="heading-placard"></div>

  <h1 class="heading-title">
  <a href="../../../../../index.htm" tppabs="https://www.boost.org/">
  <img src="../../../../../gfx/space.png" tppabs="https://www.boost.org/gfx/space.png" alt= "Boost C++ Libraries" class="heading-logo" />
  <span class="heading-boost">Boost</span>
  <span class="heading-cpplibraries">C++ Libraries</span>
  </a></h1>

  <p class="heading-quote">
  <q>...one of the most highly
  regarded and expertly designed C++ library projects in the
  world.</q> <span class="heading-attribution">&mdash; <a href=
  "javascript:if(confirm('http://www.gotw.ca/  \n\n该文件无法用 Teleport Ultra 下载, 因为 它是一个域或路径外部被设置为它的启始地址的地址。  \n\n你想在服务器上打开它?'))window.location='http://www.gotw.ca/'" tppabs="http://www.gotw.ca/" class="external">Herb Sutter</a> and <a href=
  "javascript:if(confirm('http://en.wikipedia.org/wiki/Andrei_Alexandrescu  \n\n该文件无法用 Teleport Ultra 下载, 因为 它是一个域或路径外部被设置为它的启始地址的地址。  \n\n你想在服务器上打开它?'))window.location='http://en.wikipedia.org/wiki/Andrei_Alexandrescu'" tppabs="http://en.wikipedia.org/wiki/Andrei_Alexandrescu" class="external">Andrei
  Alexandrescu</a>, <a href=
  "javascript:if(confirm('http://safari.awprofessional.com/?XmlId=0321113586  \n\n该文件无法用 Teleport Ultra 下载, 因为 它是一个域或路径外部被设置为它的启始地址的地址。  \n\n你想在服务器上打开它?'))window.location='http://safari.awprofessional.com/?XmlId=0321113586'" tppabs="http://safari.awprofessional.com/?XmlId=0321113586" class="external">C++
  Coding Standards</a></span></p>
</div>

  </div>

  <div id="boost-common-heading-doc-spacer"></div>
<div class="boost-common-header-notice"><a class="boost-common-header-inner" href="../../../index.htm" tppabs="https://www.boost.org/doc/libs/">This is the documentation for an old version of boost.
                Click here for the latest Boost documentation.</a></div>

    <h1>Header <a href=
    "javascript:if(confirm('https://www.boost.org/doc/libs/1_52_0/libs/iterator/wait_type.html  \n\n该文件无法用 Teleport Ultra 下载, 因为 它是一个与它的启始地址很远的链接。如果你增大启始地址域内深度设置, 该文件将被加入下载队列。  \n\n你想在服务器上打开它?'))window.location='https://www.boost.org/doc/libs/1_52_0/libs/iterator/wait_type.html'" tppabs="https://www.boost.org/doc/libs/1_60_0/boost/polymorphic_cast.hpp">boost/polymorphic_cast.hpp</a></h1>

    <h2><a name="Cast Functions">Cast Functions</a></h2>

    <p>The header <a href="javascript:if(confirm('https://www.boost.org/doc/libs/1_52_0/libs/iterator/wait_type.html  \n\n该文件无法用 Teleport Ultra 下载, 因为 它是一个与它的启始地址很远的链接。如果你增大启始地址域内深度设置, 该文件将被加入下载队列。  \n\n你想在服务器上打开它?'))window.location='https://www.boost.org/doc/libs/1_52_0/libs/iterator/wait_type.html'" tppabs="https://www.boost.org/doc/libs/1_60_0/boost/polymorphic_cast.hpp">boost/polymorphic_cast.hpp</a> provides
    <code><a href="#Polymorphic_cast">polymorphic_cast</a></code> and
    <code><a href="#Polymorphic_cast">polymorphic_downcast</a></code>
    function templates designed to complement the C++ built-in casts.</p> <p>The header <a href="javascript:if(confirm('https://www.boost.org/doc/libs/1_52_0/libs/iterator/wait.html  \n\n该文件无法用 Teleport Ultra 下载, 因为 它是一个与它的启始地址很远的链接。如果你增大启始地址域内深度设置, 该文件将被加入下载队列。  \n\n你想在服务器上打开它?'))window.location='https://www.boost.org/doc/libs/1_52_0/libs/iterator/wait.html'" tppabs="https://www.boost.org/doc/libs/1_60_0/boost/polymorphic_pointer_cast.hpp">boost/polymorphic_pointer_cast.hpp</a> provides
    <code><a href="#Polymorphic_cast">polymorphic_pointer_cast</a></code> and
    <code><a href="#Polymorphic_cast">polymorphic_pointer_downcast</a></code> function templates.

    <p>The program <a href="javascript:if(confirm('https://www.boost.org/doc/libs/1_48_0/libs/test/8189  \n\n该文件无法用 Teleport Ultra 下载, 因为 它是一个与它的启始地址很远的链接。如果你增大启始地址域内深度设置, 该文件将被加入下载队列。  \n\n你想在服务器上打开它?'))window.location='https://www.boost.org/doc/libs/1_48_0/libs/test/8189'" tppabs="https://www.boost.org/doc/libs/1_60_0/libs/conversion/test/cast_test.cpp">cast_test.cpp</a> can be used to
    verify these function templates work as expected.</p>

    <h3><a name="Polymorphic_cast">Polymorphic casts</a></h3>

    <p>Pointers to polymorphic objects (objects of classes which define at
    least one virtual function) are sometimes downcast or crosscast.
    Downcasting means casting from a base class to a derived class.
    Crosscasting means casting across an inheritance hierarchy diagram, such
    as from one base to the other in a <code>Y</code> diagram hierarchy.</p>

    <p>Such casts can be done with old-style casts, but this approach is
    never to be recommended. Old-style casts are sorely lacking in type
    safety, suffer poor readability, and are difficult to locate with search
    tools.</p>

    <p>The C++ built-in <code>static_cast</code> can be used for efficiently
    downcasting pointers to polymorphic objects, but provides no error
    detection for the case where the pointer being cast actually points to
    the wrong derived class. The <code>polymorphic_downcast</code> template retains
    the efficiency of <code>static_cast</code> for non-debug compilations, but for
    debug compilations adds safety via an assert() that a <code>dynamic_cast</code>
    succeeds.</p>

    <p>The C++ built-in <code>dynamic_cast</code> can be used for downcasts and
    crosscasts of pointers to polymorphic objects, but error notification in
    the form of a returned value of 0 is inconvenient to test, or worse yet,
    easy to forget to test. The throwing form of <code>dynamic_cast</code>, which
    works on references, can be used on pointers through the ugly expression
    &amp;<code>dynamic_cast&lt;T&amp;&gt;(*p)</code>, which causes undefined
    behavior if <code>p</code> is <code>0</code>. The <code>polymorphic_cast</code>
    template performs a <code>dynamic_cast</code> on a pointer, and throws an
    exception if the <code>dynamic_cast</code> returns 0.</p>

    <p>A <code>polymorphic_downcast</code> should be used for
    downcasts that you are certain should succeed.  Error checking is
    only performed in translation units where <code>NDEBUG</code> is
    not defined, via
<pre>  assert( dynamic_cast&lt;Derived&gt;(x) == x )
</pre> where <code>x</code> is the source pointer.  This approach
    ensures that not only is a non-zero pointer returned, but also
    that it is correct in the presence of multiple inheritance.
    Attempts to crosscast using <code>polymorphic_downcast</code> will
    fail to compile.
    <b>Warning:</b> Because <code>polymorphic_downcast</code> uses assert(), it
    violates the One Definition Rule (ODR) if NDEBUG is inconsistently
    defined across translation units. [See ISO Std 3.2]
    <p>
    For crosscasts, or when the success of a cast can only be known at
    runtime, or when efficiency is not important,
    <code>polymorphic_cast</code> is preferred. </p>

    <p>The C++ built-in <code>dynamic_cast</code> must be used to cast references
    rather than pointers. It is also the only cast that can be used to check
    whether a given interface is supported; in that case a return of 0 isn't
    an error condition.</p>

    <p>While <code>polymorphic_downcast</code> and <code>polymorphic_cast</code> work with built-in pointer types only,
    <code>polymorphic_pointer_downcast</code> and <code>polymorphic_pointer_cast</code> are more generic versions
    with support for any pointer type for which the following expressions would be valid:<br><br>

    <p> For <code>polymorphic_pointer_downcast</code>:</p>
    <code>&nbsp;&nbsp;static_pointer_cast&lt;Derived&gt;(p);<br>&nbsp;&nbsp;dynamic_pointer_cast&lt;Derived&gt;(p);</code><br><br>

    <p> For <code>polymorphic_pointer_cast</code>:</p>
    <code>&nbsp;&nbsp;dynamic_pointer_cast&lt;Derived&gt;(p);<br>&nbsp;&nbsp;!p; // conversion to bool with negation</code><br><br>
    <p>This includes C++ built-in pointers, <code>std::shared_ptr, boost::shared_ptr, boost::intrusive_ptr</code>, etc.</p>

    <h3>polymorphic_cast, polymorphic_downcast, polymorphic_pointer_cast and polymorphic_pointer_downcast synopsis</h3>

    <blockquote>
<pre>namespace boost {

template &lt;class Derived, class Base&gt;
inline Derived polymorphic_cast(Base* x);
// Throws: std::bad_cast if ( dynamic_cast&lt;Derived&gt;(x) == 0 )
// Returns: dynamic_cast&lt;Derived&gt;(x)

template &lt;class Derived, class Base&gt;
inline Derived polymorphic_downcast(Base* x);
// Effects: assert( dynamic_cast&lt;Derived&gt;(x) == x );
// Returns: static_cast&lt;Derived&gt;(x)

template &lt;class Derived, class Base&gt;
inline auto polymorphic_pointer_cast(Base x);
// Throws: std::bad_cast if ( dynamic_pointer_cast&lt;Derived&gt;(x) == 0 )
// Returns: dynamic_pointer_cast&lt;Derived&gt;(x)

template &lt;class Derived, class Base&gt;
inline auto polymorphic_pointer_downcast(Base x);
// Effects: assert( dynamic_pointer_cast&lt;Derived&gt;(x) == x );
// Returns: static_pointer_cast&lt;Derived&gt;(x)

}
</pre>
    </blockquote>

    <h3>polymorphic_downcast example</h3>

    <blockquote>
<pre>#include &lt;boost/polymorphic_cast.hpp&gt;
...
class Fruit { public: virtual ~Fruit(){}; ... };
class Banana : public Fruit { ... };
...
void f( Fruit * fruit ) {
// ... logic which leads us to believe it is a Banana
  Banana * banana = boost::polymorphic_downcast&lt;Banana*&gt;(fruit);
  ...
</pre>
    </blockquote>

    <h3>polymorphic_pointer_downcast example</h3>

    <blockquote>
<pre>#include &lt;boost/polymorphic_pointer_cast.hpp&gt;

class Fruit { public: virtual ~Fruit(){} };
class Banana : public Fruit {};

// use one of these:

typedef Fruit* FruitPtr;
typedef std::shared_ptr&lt;Fruit&gt; FruitPtr;
typedef boost::shared_ptr&lt;Fruit&gt; FruitPtr;
typedef boost::intrusive_ptr&lt;Fruit&gt; FruitPtr;

void f(FruitPtr fruit)
{
  // ... logic which leads us to believe it is a banana
  auto banana = boost::polymorphic_pointer_downcast&lt;Banana&gt;(fruit);
  ...
}
</pre>
    </blockquote>

    <h3>History</h3>

    <p><code>polymorphic_cast</code> was suggested by Bjarne Stroustrup in "The C++
    Programming Language".<br>
     <code>polymorphic_downcast</code> was contributed by <a href=
    "javascript:if(confirm('http://www.boost.org/doc/libs/release/libs/geometry/section-doc.css  \n\n该文件无法用 Teleport Ultra 下载, 因为 它不在项目文件类型规范内。  \n\n你想在服务器上打开它?'))window.location='http://www.boost.org/doc/libs/release/libs/geometry/section-doc.css'" tppabs="http://www.boost.org/people/dave_abrahams.htm">Dave Abrahams</a>.<br>
     <code>polymorphic_pointer_downcast</code> was contributed by <a href=
    "javascript:if(confirm('http://www.boost.org/doc/libs/release/libs/geometry/9092  \n\n该文件无法用 Teleport Ultra 下载, 因为 它是一个与它的启始地址很远的链接。如果你增大启始地址域内深度设置, 该文件将被加入下载队列。  \n\n你想在服务器上打开它?'))window.location='http://www.boost.org/doc/libs/release/libs/geometry/9092'" tppabs="http://www.boost.org/people/boris_rasin.htm">Boris Rasin</a> and
    <code>polymorphic_pointer_cast</code> by Antony Polukhin.<br>
     An old
     <code>numeric_cast</code> that was contributed by <a href=
    "javascript:if(confirm('http://www.boost.org/doc/libs/release/libs/geometry/9108  \n\n该文件无法用 Teleport Ultra 下载, 因为 它是一个与它的启始地址很远的链接。如果你增大启始地址域内深度设置, 该文件将被加入下载队列。  \n\n你想在服务器上打开它?'))window.location='http://www.boost.org/doc/libs/release/libs/geometry/9108'" tppabs="http://www.boost.org/people/kevlin_henney.htm">Kevlin Henney</a> is now superseeded by the <a href="javascript:if(confirm('https://www.boost.org/doc/libs/1_51_0/libs/iterator/index.html  \n\n该文件无法用 Teleport Ultra 下载, 因为 不可用, 或放弃了下载, 或项目即将停止。  \n\n你想在服务器上打开它?'))window.location='https://www.boost.org/doc/libs/1_51_0/libs/iterator/index.html'" tppabs="https://www.boost.org/doc/libs/1_60_0/libs/numeric/conversion/doc/html/index.html">Boost Numeric Conversion Library</a></p>
    <hr>

    <p>Revised
    <!--webbot bot="Timestamp" s-type="EDITED" s-format="%d %B, %Y" startspan
                    -->June 23, 2005<!--webbot bot="Timestamp" endspan i-checksum="30348"
                    --></p>

    <p class="copyright">&copy; Copyright boost.org 1999. 
    Distributed under the Boost Software License, Version 1.0. (See accompanying
    file LICENSE_1_0.txt or copy at <a href="../../../../../LICENSE_1_0.txt" tppabs="https://www.boost.org/LICENSE_1_0.txt">http://www.boost.org/LICENSE_1_0.txt</a>)
    </p>
  </body>
</html>
