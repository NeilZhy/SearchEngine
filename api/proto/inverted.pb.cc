// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: inverted.proto

#include "inverted.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)
namespace inverm {
class IntDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Int>
      _instance;
} _Int_default_instance_;
class invered_indexDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<invered_index>
      _instance;
} _invered_index_default_instance_;
class invered_hashDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<invered_hash>
      _instance;
} _invered_hash_default_instance_;
}  // namespace inverm
namespace protobuf_inverted_2eproto {
void InitDefaultsIntImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::inverm::_Int_default_instance_;
    new (ptr) ::inverm::Int();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::inverm::Int::InitAsDefaultInstance();
}

void InitDefaultsInt() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsIntImpl);
}

void InitDefaultsinvered_indexImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_inverted_2eproto::InitDefaultsInt();
  {
    void* ptr = &::inverm::_invered_index_default_instance_;
    new (ptr) ::inverm::invered_index();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::inverm::invered_index::InitAsDefaultInstance();
}

void InitDefaultsinvered_index() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsinvered_indexImpl);
}

void InitDefaultsinvered_hashImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_inverted_2eproto::InitDefaultsinvered_index();
  {
    void* ptr = &::inverm::_invered_hash_default_instance_;
    new (ptr) ::inverm::invered_hash();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::inverm::invered_hash::InitAsDefaultInstance();
}

void InitDefaultsinvered_hash() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsinvered_hashImpl);
}

::google::protobuf::Metadata file_level_metadata[3];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::inverm::Int, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::inverm::Int, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::inverm::Int, docid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::inverm::Int, times_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::inverm::invered_index, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::inverm::invered_index, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::inverm::invered_index, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::inverm::invered_index, docid_vector_),
  0,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::inverm::invered_hash, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::inverm::invered_hash, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::inverm::invered_hash, index_),
  ~0u,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(::inverm::Int)},
  { 9, 16, sizeof(::inverm::invered_index)},
  { 18, 24, sizeof(::inverm::invered_hash)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::inverm::_Int_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::inverm::_invered_index_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::inverm::_invered_hash_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "inverted.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 3);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\016inverted.proto\022\006inverm\"#\n\003Int\022\r\n\005docid"
      "\030\001 \002(\005\022\r\n\005times\030\002 \002(\005\"\?\n\rinvered_index\022\013"
      "\n\003key\030\001 \002(\014\022!\n\014docid_vector\030\002 \003(\0132\013.inve"
      "rm.Int\"4\n\014invered_hash\022$\n\005index\030\001 \003(\0132\025."
      "inverm.invered_index"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 180);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "inverted.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_inverted_2eproto
namespace inverm {

// ===================================================================

void Int::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Int::kDocidFieldNumber;
const int Int::kTimesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Int::Int()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_inverted_2eproto::InitDefaultsInt();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:inverm.Int)
}
Int::Int(const Int& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&docid_, &from.docid_,
    static_cast<size_t>(reinterpret_cast<char*>(&times_) -
    reinterpret_cast<char*>(&docid_)) + sizeof(times_));
  // @@protoc_insertion_point(copy_constructor:inverm.Int)
}

void Int::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&docid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&times_) -
      reinterpret_cast<char*>(&docid_)) + sizeof(times_));
}

Int::~Int() {
  // @@protoc_insertion_point(destructor:inverm.Int)
  SharedDtor();
}

void Int::SharedDtor() {
}

void Int::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Int::descriptor() {
  ::protobuf_inverted_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_inverted_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Int& Int::default_instance() {
  ::protobuf_inverted_2eproto::InitDefaultsInt();
  return *internal_default_instance();
}

Int* Int::New(::google::protobuf::Arena* arena) const {
  Int* n = new Int;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Int::Clear() {
// @@protoc_insertion_point(message_clear_start:inverm.Int)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    ::memset(&docid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&times_) -
        reinterpret_cast<char*>(&docid_)) + sizeof(times_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Int::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:inverm.Int)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 docid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_docid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &docid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 times = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_times();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &times_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:inverm.Int)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:inverm.Int)
  return false;
#undef DO_
}

void Int::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:inverm.Int)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 docid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->docid(), output);
  }

  // required int32 times = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->times(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:inverm.Int)
}

::google::protobuf::uint8* Int::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:inverm.Int)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 docid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->docid(), target);
  }

  // required int32 times = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->times(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:inverm.Int)
  return target;
}

size_t Int::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:inverm.Int)
  size_t total_size = 0;

  if (has_docid()) {
    // required int32 docid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->docid());
  }

  if (has_times()) {
    // required int32 times = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->times());
  }

  return total_size;
}
size_t Int::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:inverm.Int)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required int32 docid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->docid());

    // required int32 times = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->times());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Int::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:inverm.Int)
  GOOGLE_DCHECK_NE(&from, this);
  const Int* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Int>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:inverm.Int)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:inverm.Int)
    MergeFrom(*source);
  }
}

void Int::MergeFrom(const Int& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:inverm.Int)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      docid_ = from.docid_;
    }
    if (cached_has_bits & 0x00000002u) {
      times_ = from.times_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Int::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:inverm.Int)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Int::CopyFrom(const Int& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:inverm.Int)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Int::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void Int::Swap(Int* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Int::InternalSwap(Int* other) {
  using std::swap;
  swap(docid_, other->docid_);
  swap(times_, other->times_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Int::GetMetadata() const {
  protobuf_inverted_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_inverted_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void invered_index::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int invered_index::kKeyFieldNumber;
const int invered_index::kDocidVectorFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

invered_index::invered_index()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_inverted_2eproto::InitDefaultsinvered_index();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:inverm.invered_index)
}
invered_index::invered_index(const invered_index& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      docid_vector_(from.docid_vector_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_key()) {
    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  // @@protoc_insertion_point(copy_constructor:inverm.invered_index)
}

void invered_index::SharedCtor() {
  _cached_size_ = 0;
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

invered_index::~invered_index() {
  // @@protoc_insertion_point(destructor:inverm.invered_index)
  SharedDtor();
}

void invered_index::SharedDtor() {
  key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void invered_index::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* invered_index::descriptor() {
  ::protobuf_inverted_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_inverted_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const invered_index& invered_index::default_instance() {
  ::protobuf_inverted_2eproto::InitDefaultsinvered_index();
  return *internal_default_instance();
}

invered_index* invered_index::New(::google::protobuf::Arena* arena) const {
  invered_index* n = new invered_index;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void invered_index::Clear() {
// @@protoc_insertion_point(message_clear_start:inverm.invered_index)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  docid_vector_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(!key_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*key_.UnsafeRawStringPointer())->clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool invered_index::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:inverm.invered_index)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes key = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_key()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .inverm.Int docid_vector = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_docid_vector()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:inverm.invered_index)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:inverm.invered_index)
  return false;
#undef DO_
}

void invered_index::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:inverm.invered_index)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bytes key = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->key(), output);
  }

  // repeated .inverm.Int docid_vector = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->docid_vector_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->docid_vector(static_cast<int>(i)), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:inverm.invered_index)
}

::google::protobuf::uint8* invered_index::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:inverm.invered_index)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bytes key = 1;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->key(), target);
  }

  // repeated .inverm.Int docid_vector = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->docid_vector_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->docid_vector(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:inverm.invered_index)
  return target;
}

size_t invered_index::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:inverm.invered_index)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required bytes key = 1;
  if (has_key()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->key());
  }
  // repeated .inverm.Int docid_vector = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->docid_vector_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->docid_vector(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void invered_index::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:inverm.invered_index)
  GOOGLE_DCHECK_NE(&from, this);
  const invered_index* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const invered_index>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:inverm.invered_index)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:inverm.invered_index)
    MergeFrom(*source);
  }
}

void invered_index::MergeFrom(const invered_index& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:inverm.invered_index)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  docid_vector_.MergeFrom(from.docid_vector_);
  if (from.has_key()) {
    set_has_key();
    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
}

void invered_index::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:inverm.invered_index)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void invered_index::CopyFrom(const invered_index& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:inverm.invered_index)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool invered_index::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->docid_vector())) return false;
  return true;
}

void invered_index::Swap(invered_index* other) {
  if (other == this) return;
  InternalSwap(other);
}
void invered_index::InternalSwap(invered_index* other) {
  using std::swap;
  docid_vector_.InternalSwap(&other->docid_vector_);
  key_.Swap(&other->key_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata invered_index::GetMetadata() const {
  protobuf_inverted_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_inverted_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void invered_hash::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int invered_hash::kIndexFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

invered_hash::invered_hash()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_inverted_2eproto::InitDefaultsinvered_hash();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:inverm.invered_hash)
}
invered_hash::invered_hash(const invered_hash& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      index_(from.index_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:inverm.invered_hash)
}

void invered_hash::SharedCtor() {
  _cached_size_ = 0;
}

invered_hash::~invered_hash() {
  // @@protoc_insertion_point(destructor:inverm.invered_hash)
  SharedDtor();
}

void invered_hash::SharedDtor() {
}

void invered_hash::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* invered_hash::descriptor() {
  ::protobuf_inverted_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_inverted_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const invered_hash& invered_hash::default_instance() {
  ::protobuf_inverted_2eproto::InitDefaultsinvered_hash();
  return *internal_default_instance();
}

invered_hash* invered_hash::New(::google::protobuf::Arena* arena) const {
  invered_hash* n = new invered_hash;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void invered_hash::Clear() {
// @@protoc_insertion_point(message_clear_start:inverm.invered_hash)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  index_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool invered_hash::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:inverm.invered_hash)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .inverm.invered_index index = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_index()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:inverm.invered_hash)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:inverm.invered_hash)
  return false;
#undef DO_
}

void invered_hash::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:inverm.invered_hash)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .inverm.invered_index index = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->index_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->index(static_cast<int>(i)), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:inverm.invered_hash)
}

::google::protobuf::uint8* invered_hash::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:inverm.invered_hash)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .inverm.invered_index index = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->index_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->index(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:inverm.invered_hash)
  return target;
}

size_t invered_hash::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:inverm.invered_hash)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .inverm.invered_index index = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->index_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->index(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void invered_hash::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:inverm.invered_hash)
  GOOGLE_DCHECK_NE(&from, this);
  const invered_hash* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const invered_hash>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:inverm.invered_hash)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:inverm.invered_hash)
    MergeFrom(*source);
  }
}

void invered_hash::MergeFrom(const invered_hash& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:inverm.invered_hash)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  index_.MergeFrom(from.index_);
}

void invered_hash::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:inverm.invered_hash)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void invered_hash::CopyFrom(const invered_hash& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:inverm.invered_hash)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool invered_hash::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->index())) return false;
  return true;
}

void invered_hash::Swap(invered_hash* other) {
  if (other == this) return;
  InternalSwap(other);
}
void invered_hash::InternalSwap(invered_hash* other) {
  using std::swap;
  index_.InternalSwap(&other->index_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata invered_hash::GetMetadata() const {
  protobuf_inverted_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_inverted_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace inverm

// @@protoc_insertion_point(global_scope)
