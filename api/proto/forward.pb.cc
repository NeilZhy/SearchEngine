// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: forward.proto

#include "forward.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)
namespace lm {
class StrDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Str>
      _instance;
} _Str_default_instance_;
class forwar_indexDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<forwar_index>
      _instance;
} _forwar_index_default_instance_;
class forward_hashDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<forward_hash>
      _instance;
} _forward_hash_default_instance_;
}  // namespace lm
namespace protobuf_forward_2eproto {
void InitDefaultsStrImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::lm::_Str_default_instance_;
    new (ptr) ::lm::Str();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::lm::Str::InitAsDefaultInstance();
}

void InitDefaultsStr() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsStrImpl);
}

void InitDefaultsforwar_indexImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_forward_2eproto::InitDefaultsStr();
  {
    void* ptr = &::lm::_forwar_index_default_instance_;
    new (ptr) ::lm::forwar_index();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::lm::forwar_index::InitAsDefaultInstance();
}

void InitDefaultsforwar_index() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsforwar_indexImpl);
}

void InitDefaultsforward_hashImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_forward_2eproto::InitDefaultsforwar_index();
  {
    void* ptr = &::lm::_forward_hash_default_instance_;
    new (ptr) ::lm::forward_hash();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::lm::forward_hash::InitAsDefaultInstance();
}

void InitDefaultsforward_hash() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsforward_hashImpl);
}

::google::protobuf::Metadata file_level_metadata[3];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::lm::Str, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::lm::Str, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::lm::Str, str_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::lm::forwar_index, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::lm::forwar_index, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::lm::forwar_index, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::lm::forwar_index, value_vector_),
  0,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::lm::forward_hash, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::lm::forward_hash, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::lm::forward_hash, index_),
  ~0u,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 6, sizeof(::lm::Str)},
  { 7, 14, sizeof(::lm::forwar_index)},
  { 16, 22, sizeof(::lm::forward_hash)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::lm::_Str_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::lm::_forwar_index_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::lm::_forward_hash_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "forward.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 3);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\rforward.proto\022\002lm\"\022\n\003Str\022\013\n\003str\030\002 \002(\014\""
      ":\n\014forwar_index\022\013\n\003key\030\001 \002(\005\022\035\n\014value_ve"
      "ctor\030\002 \003(\0132\007.lm.Str\"/\n\014forward_hash\022\037\n\005i"
      "ndex\030\001 \003(\0132\020.lm.forwar_index"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 148);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "forward.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_forward_2eproto
namespace lm {

// ===================================================================

void Str::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Str::kStrFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Str::Str()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_forward_2eproto::InitDefaultsStr();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:lm.Str)
}
Str::Str(const Str& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  str_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_str()) {
    str_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.str_);
  }
  // @@protoc_insertion_point(copy_constructor:lm.Str)
}

void Str::SharedCtor() {
  _cached_size_ = 0;
  str_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

Str::~Str() {
  // @@protoc_insertion_point(destructor:lm.Str)
  SharedDtor();
}

void Str::SharedDtor() {
  str_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Str::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Str::descriptor() {
  ::protobuf_forward_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_forward_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Str& Str::default_instance() {
  ::protobuf_forward_2eproto::InitDefaultsStr();
  return *internal_default_instance();
}

Str* Str::New(::google::protobuf::Arena* arena) const {
  Str* n = new Str;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Str::Clear() {
// @@protoc_insertion_point(message_clear_start:lm.Str)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(!str_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*str_.UnsafeRawStringPointer())->clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Str::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:lm.Str)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes str = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_str()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:lm.Str)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:lm.Str)
  return false;
#undef DO_
}

void Str::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:lm.Str)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bytes str = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->str(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:lm.Str)
}

::google::protobuf::uint8* Str::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:lm.Str)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bytes str = 2;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->str(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lm.Str)
  return target;
}

size_t Str::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lm.Str)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required bytes str = 2;
  if (has_str()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->str());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Str::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lm.Str)
  GOOGLE_DCHECK_NE(&from, this);
  const Str* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Str>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lm.Str)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lm.Str)
    MergeFrom(*source);
  }
}

void Str::MergeFrom(const Str& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lm.Str)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_str()) {
    set_has_str();
    str_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.str_);
  }
}

void Str::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lm.Str)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Str::CopyFrom(const Str& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lm.Str)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Str::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void Str::Swap(Str* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Str::InternalSwap(Str* other) {
  using std::swap;
  str_.Swap(&other->str_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Str::GetMetadata() const {
  protobuf_forward_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_forward_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void forwar_index::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int forwar_index::kKeyFieldNumber;
const int forwar_index::kValueVectorFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

forwar_index::forwar_index()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_forward_2eproto::InitDefaultsforwar_index();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:lm.forwar_index)
}
forwar_index::forwar_index(const forwar_index& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      value_vector_(from.value_vector_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  key_ = from.key_;
  // @@protoc_insertion_point(copy_constructor:lm.forwar_index)
}

void forwar_index::SharedCtor() {
  _cached_size_ = 0;
  key_ = 0;
}

forwar_index::~forwar_index() {
  // @@protoc_insertion_point(destructor:lm.forwar_index)
  SharedDtor();
}

void forwar_index::SharedDtor() {
}

void forwar_index::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* forwar_index::descriptor() {
  ::protobuf_forward_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_forward_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const forwar_index& forwar_index::default_instance() {
  ::protobuf_forward_2eproto::InitDefaultsforwar_index();
  return *internal_default_instance();
}

forwar_index* forwar_index::New(::google::protobuf::Arena* arena) const {
  forwar_index* n = new forwar_index;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void forwar_index::Clear() {
// @@protoc_insertion_point(message_clear_start:lm.forwar_index)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_vector_.Clear();
  key_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool forwar_index::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:lm.forwar_index)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 key = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_key();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &key_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .lm.Str value_vector = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_value_vector()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:lm.forwar_index)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:lm.forwar_index)
  return false;
#undef DO_
}

void forwar_index::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:lm.forwar_index)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 key = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->key(), output);
  }

  // repeated .lm.Str value_vector = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->value_vector_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->value_vector(static_cast<int>(i)), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:lm.forwar_index)
}

::google::protobuf::uint8* forwar_index::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:lm.forwar_index)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 key = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->key(), target);
  }

  // repeated .lm.Str value_vector = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->value_vector_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->value_vector(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lm.forwar_index)
  return target;
}

size_t forwar_index::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lm.forwar_index)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required int32 key = 1;
  if (has_key()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->key());
  }
  // repeated .lm.Str value_vector = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->value_vector_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->value_vector(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void forwar_index::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lm.forwar_index)
  GOOGLE_DCHECK_NE(&from, this);
  const forwar_index* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const forwar_index>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lm.forwar_index)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lm.forwar_index)
    MergeFrom(*source);
  }
}

void forwar_index::MergeFrom(const forwar_index& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lm.forwar_index)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  value_vector_.MergeFrom(from.value_vector_);
  if (from.has_key()) {
    set_key(from.key());
  }
}

void forwar_index::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lm.forwar_index)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void forwar_index::CopyFrom(const forwar_index& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lm.forwar_index)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool forwar_index::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->value_vector())) return false;
  return true;
}

void forwar_index::Swap(forwar_index* other) {
  if (other == this) return;
  InternalSwap(other);
}
void forwar_index::InternalSwap(forwar_index* other) {
  using std::swap;
  value_vector_.InternalSwap(&other->value_vector_);
  swap(key_, other->key_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata forwar_index::GetMetadata() const {
  protobuf_forward_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_forward_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void forward_hash::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int forward_hash::kIndexFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

forward_hash::forward_hash()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_forward_2eproto::InitDefaultsforward_hash();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:lm.forward_hash)
}
forward_hash::forward_hash(const forward_hash& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      index_(from.index_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:lm.forward_hash)
}

void forward_hash::SharedCtor() {
  _cached_size_ = 0;
}

forward_hash::~forward_hash() {
  // @@protoc_insertion_point(destructor:lm.forward_hash)
  SharedDtor();
}

void forward_hash::SharedDtor() {
}

void forward_hash::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* forward_hash::descriptor() {
  ::protobuf_forward_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_forward_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const forward_hash& forward_hash::default_instance() {
  ::protobuf_forward_2eproto::InitDefaultsforward_hash();
  return *internal_default_instance();
}

forward_hash* forward_hash::New(::google::protobuf::Arena* arena) const {
  forward_hash* n = new forward_hash;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void forward_hash::Clear() {
// @@protoc_insertion_point(message_clear_start:lm.forward_hash)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  index_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool forward_hash::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:lm.forward_hash)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .lm.forwar_index index = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_index()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:lm.forward_hash)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:lm.forward_hash)
  return false;
#undef DO_
}

void forward_hash::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:lm.forward_hash)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .lm.forwar_index index = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->index_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->index(static_cast<int>(i)), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:lm.forward_hash)
}

::google::protobuf::uint8* forward_hash::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:lm.forward_hash)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .lm.forwar_index index = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->index_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->index(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lm.forward_hash)
  return target;
}

size_t forward_hash::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lm.forward_hash)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .lm.forwar_index index = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->index_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->index(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void forward_hash::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lm.forward_hash)
  GOOGLE_DCHECK_NE(&from, this);
  const forward_hash* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const forward_hash>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lm.forward_hash)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lm.forward_hash)
    MergeFrom(*source);
  }
}

void forward_hash::MergeFrom(const forward_hash& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lm.forward_hash)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  index_.MergeFrom(from.index_);
}

void forward_hash::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lm.forward_hash)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void forward_hash::CopyFrom(const forward_hash& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lm.forward_hash)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool forward_hash::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->index())) return false;
  return true;
}

void forward_hash::Swap(forward_hash* other) {
  if (other == this) return;
  InternalSwap(other);
}
void forward_hash::InternalSwap(forward_hash* other) {
  using std::swap;
  index_.InternalSwap(&other->index_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata forward_hash::GetMetadata() const {
  protobuf_forward_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_forward_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace lm

// @@protoc_insertion_point(global_scope)
